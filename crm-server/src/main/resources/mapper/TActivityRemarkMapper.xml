<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.zs.crmserver.mapper.TActivityRemarkMapper">
  <resultMap id="BaseResultMap" type="com.zs.crmserver.model.TActivityRemark">
    <id column="id" jdbcType="INTEGER" property="id" />
    <result column="activity_id" jdbcType="INTEGER" property="activityId" />
    <result column="note_content" jdbcType="VARCHAR" property="noteContent" />
    <result column="create_time" jdbcType="TIMESTAMP" property="createTime" />
    <result column="create_by" jdbcType="INTEGER" property="createBy" />
    <result column="edit_time" jdbcType="TIMESTAMP" property="editTime" />
    <result column="edit_by" jdbcType="INTEGER" property="editBy" />
    <result column="deleted" jdbcType="INTEGER" property="deleted" />
  </resultMap>

  <!-- 分页列表 -->
  <resultMap id="ActivityRemarkResultMap" type="com.zs.crmserver.model.TActivityRemark">
    <id column="id" jdbcType="INTEGER" property="id" />
    <result column="activity_id" jdbcType="INTEGER" property="activityId" />
    <result column="note_content" jdbcType="VARCHAR" property="noteContent" />
    <result column="create_time" jdbcType="TIMESTAMP" property="createTime" />
    <result column="create_by" jdbcType="INTEGER" property="createBy" />
    <result column="create_name" jdbcType="VARCHAR" property="createName" />
    <result column="edit_time" jdbcType="TIMESTAMP" property="editTime" />
    <result column="edit_by" jdbcType="INTEGER" property="editBy" />
    <result column="edit_name" jdbcType="VARCHAR" property="editName" />
    <result column="deleted" jdbcType="INTEGER" property="deleted" />
  </resultMap>

  <sql id="Base_Column_List">
    id, activity_id, note_content, create_time, create_by, edit_time, edit_by, deleted
  </sql>

  <!-- 分页查询备注 -->
  <select id="selectActivityRemarkByPage" resultMap="ActivityRemarkResultMap">
    select
      tar.*,
      tuc.name create_name,
      tue.name edit_name
    from t_activity_remark tar
        left join t_user tuc on tar.create_by = tuc.id
        left join t_user tue on tar.edit_by = tue.id
    <where>
      tar.activity_id = #{activityRemarkQuery.activityId, jdbcType=INTEGER}
        and (tar.deleted is null or tar.deleted = 0)
      <if test="activityRemarkQuery.keyword != null and activityRemarkQuery.keyword != ''">
        AND (
          tar.note_content LIKE CONCAT('%', #{activityRemarkQuery.keyword}, '%')
        )
      </if>
      ${ activityRemarkQuery.filterSQL }
    </where>
    ORDER BY ${@com.zs.crmserver.util.SqlUtils@safeSort(
        pageQuery.sortField,
        pageQuery.sortOrder,
        "create_time",
        "start_time", "end_time", "create_time", "cost", "name"
    )}
  </select>

  <select id="selectByPrimaryKey" parameterType="java.lang.Integer" resultMap="BaseResultMap">
    select 
    <include refid="Base_Column_List" />
    from t_activity_remark
    where id = #{id,jdbcType=INTEGER}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer">
    delete from t_activity_remark
    where id = #{id,jdbcType=INTEGER}
  </delete>
  <insert id="insert" keyColumn="id" keyProperty="id" parameterType="com.zs.crmserver.model.TActivityRemark" useGeneratedKeys="true">
    insert into t_activity_remark (activity_id, note_content, create_time, 
      create_by, edit_time, edit_by, 
      deleted)
    values (#{activityId,jdbcType=INTEGER}, #{noteContent,jdbcType=VARCHAR}, #{createTime,jdbcType=TIMESTAMP}, 
      #{createBy,jdbcType=INTEGER}, #{editTime,jdbcType=TIMESTAMP}, #{editBy,jdbcType=INTEGER}, 
      #{deleted,jdbcType=INTEGER})
  </insert>

  <!-- 创建备注 -->
  <insert id="insertSelective" keyColumn="id" keyProperty="id" parameterType="com.zs.crmserver.model.TActivityRemark" useGeneratedKeys="true">
    insert into t_activity_remark
    <trim prefix="(" suffix=")" suffixOverrides=",">
      <if test="activityId != null">
        activity_id,
      </if>
      <if test="noteContent != null">
        note_content,
      </if>
      <if test="createTime != null">
        create_time,
      </if>
      <if test="createBy != null">
        create_by,
      </if>
      <if test="editTime != null">
        edit_time,
      </if>
      <if test="editBy != null">
        edit_by,
      </if>
      <if test="deleted != null">
        deleted,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides=",">
      <if test="activityId != null">
        #{activityId,jdbcType=INTEGER},
      </if>
      <if test="noteContent != null">
        #{noteContent,jdbcType=VARCHAR},
      </if>
      <if test="createTime != null">
        #{createTime,jdbcType=TIMESTAMP},
      </if>
      <if test="createBy != null">
        #{createBy,jdbcType=INTEGER},
      </if>
      <if test="editTime != null">
        #{editTime,jdbcType=TIMESTAMP},
      </if>
      <if test="editBy != null">
        #{editBy,jdbcType=INTEGER},
      </if>
      <if test="deleted != null">
        #{deleted,jdbcType=INTEGER},
      </if>
    </trim>
  </insert>
  <!-- 编辑备注信息 -->
  <update id="updateByPrimaryKeySelective" parameterType="com.zs.crmserver.model.TActivityRemark">
    update t_activity_remark
    <set>
      <if test="activityId != null">
        activity_id = #{activityId,jdbcType=INTEGER},
      </if>
      <if test="noteContent != null">
        note_content = #{noteContent,jdbcType=VARCHAR},
      </if>
      <if test="createTime != null">
        create_time = #{createTime,jdbcType=TIMESTAMP},
      </if>
      <if test="createBy != null">
        create_by = #{createBy,jdbcType=INTEGER},
      </if>
      <if test="editTime != null">
        edit_time = #{editTime,jdbcType=TIMESTAMP},
      </if>
      <if test="editBy != null">
        edit_by = #{editBy,jdbcType=INTEGER},
      </if>
      <if test="deleted != null">
        deleted = #{deleted,jdbcType=INTEGER},
      </if>
    </set>
    where id = #{id,jdbcType=INTEGER}
  </update>
  <update id="updateByPrimaryKey" parameterType="com.zs.crmserver.model.TActivityRemark">
    update t_activity_remark
    set activity_id = #{activityId,jdbcType=INTEGER},
      note_content = #{noteContent,jdbcType=VARCHAR},
      create_time = #{createTime,jdbcType=TIMESTAMP},
      create_by = #{createBy,jdbcType=INTEGER},
      edit_time = #{editTime,jdbcType=TIMESTAMP},
      edit_by = #{editBy,jdbcType=INTEGER},
      deleted = #{deleted,jdbcType=INTEGER}
    where id = #{id,jdbcType=INTEGER}
  </update>

  <!-- 逻辑批量删除 -->
  <update id="batchUpdateDeletedStatus">
    UPDATE t_activity_remark
    SET deleted = #{deleted}
    WHERE id IN
    <foreach collection="ids" item="id" open="(" separator="," close=")">
      #{id}
    </foreach>
  </update>

  <!-- 删除活动时删除相关备注 -->
  <delete id="deleteByActivityId">
    DELETE FROM t_activity_remark
    WHERE activity_id = #{activityId}
  </delete>
  <!-- 批量删除活动时批量删除相关备注 -->
  <delete id="batchDeleteByActivityIds">
    DELETE FROM t_activity_remark
    WHERE activity_id IN
    <foreach collection="ids" item="id" open="(" separator="," close=")">
      #{id}
    </foreach>
  </delete>
</mapper>